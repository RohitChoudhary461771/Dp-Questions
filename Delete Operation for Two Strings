ðŸ‘‰---Memoization-----------------------------------
T.C O(2^n)
S.C O(2^n) +(n*n)
class Solution {
public:
    int f(string&s, string&t,int i,int j,vector<vector<int>>&dp){
        if(i<0||j<0)return 0;

        if(dp[i][j]!=-1)return dp[i][j];
        if(s[i]==t[j]){
            return dp[i][j]= 1+f(s,t,i-1,j-1,dp);
        }
        else{
            return dp[i][j]= max(f(s,t,i-1,j,dp),f(s,t,i,j-1,dp));
        }
    }
    int minDistance(string word1, string word2) {
       int n=word1.length();
       int m=word2.length();
        
        vector<vector<int>>dp(n,vector<int>(m,-1));
        int x=f(word1,word2,n-1,m-1,dp);
        int ans=n-x+m-x;
        return ans;
    }
};
ðŸ‘‰---Tabulation-----------------------------------
T.C O(n*m)
s.c O(n*m)

class Solution {
public:

    int minDistance(string word1, string word2) {
       int n=word1.length();
       int m=word2.length();
        
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(word1[i-1]==word2[j-1]){
                    dp[i][j]=dp[i-1][j-1]+1;
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        int x=dp[n][m];
        int ans=n-x+m-x;
        return ans;
    }
};

ðŸ‘‰---Space Optimization-----------------------------------
T.C O(n*m)
s.c O(m)
class Solution {
public:
    int minDistance(string word1, string word2) {
       int n=word1.length();
       int m=word2.length();
        
        vector<int>prev(m+1,0), cur(m+1,0);
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(word1[i-1]==word2[j-1]){
                    cur[j]=prev[j-1]+1;
                }
                else{
                    cur[j]=max(prev[j],cur[j-1]);
                }
            }
            prev=cur;
        }
        int x=prev[m];
        int ans=n-x+m-x;
        return ans;
    }
};
