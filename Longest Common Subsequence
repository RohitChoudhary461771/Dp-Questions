class Solution {
public:
//ðŸ‘‰ Dynamic Programing 

    //ðŸ‘‰Recurrsion
        int f(string & text1, string &text2,int n,int m,vector<vector<int>>&dp){
            if(n<0 || m<0)return 0;

            if(dp[n][m]!=-1)return dp[n][m];
            if(text1[n]==text2[m]){
                return dp[n][m]= (1+f(text1,text2,n-1,m-1,dp));
            }
            else{
                return dp[n][m]=max(f(text1,text2,n-1,m,dp),f(text1,text2,n,m-1,dp));
            }
        }
    int longestCommonSubsequence(string text1, string text2) {
        int  n=text1.length();
        int  m=text2.length();
        cout<<n<<" "<<m;

    //ðŸ‘‰ Memoization.

        // vector<vector<int>>dp(n,vector<int>(m,-1));
        // return f(text1,text2,n-1,m-1,dp); reccursion call.

    //ðŸ‘‰ Tabulation 

            // vector<vector<int>>dp(n+1,vector<int>(m+1,0));

            // for(int i=0;i<=n;i++){
            //     dp[i][0]=0;
            // }
            // for(int i=0;i<=m;i++){
            //     dp[0][i]=0;
            // }
            // for(int i=1;i<=n;i++){
            //     for(int j=1;j<=m;j++){
            //         if(text1[i-1]==text2[j-1]){
            //         dp[i][j]= (1+dp[i-1][j-1]);
            //     }
            //     else {
            //         dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            //     }
            //     }
            // }
            // return dp[n][m];
    
    //ðŸ‘‰ Space Optimization
            vector<int>prev(m+1,0),cur(m+1,0);

            
            for(int i=1;i<=n;i++){
                for(int j=1;j<=m;j++){
                    if(text1[i-1]==text2[j-1]){
                    cur[j]= (1+prev[j-1]);
                }
                else {
                    cur[j]=max(prev[j],cur[j-1]);
                }
                }
                prev=cur;
            }
            return prev[m];
    }
};
