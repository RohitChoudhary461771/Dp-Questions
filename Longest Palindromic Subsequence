ðŸŽ¯ Revese the given string,and use this revese string to find the LCS.As palindrom string after reverse also follow the same patter so 
    we extract out the common part from both the string.

ðŸ‘‰-----Memoization-------------------------------------------------------------------------

class Solution {
public:
    int f(string& s,string & t,int i,int j,vector<vector<int>>&dp){                          T.C O(2^N)
        if(i<0)return 0;                                                                     S.C O(n*n)+O(2^n)
        if(j<0)return 0;

        if(dp[i][j]!=-1)return dp[i][j];

        if(s[i]==t[j]){
            return dp[i][j]=1+f(s,t,i-1,j-1,dp);
        }
        else{
            return dp[i][j]= max(f(s,t,i-1,j,dp),f(s,t,i,j-1,dp));
        }
    }
    int longestPalindromeSubseq(string s) {
        string t=s;
        reverse(s.begin(),s.end());
        int n=s.length();
        vector<vector<int>>dp(n,vector<int>(n,-1));

        return f(s,t,n-1,n-1,dp);
    }
};

ðŸ‘‰-----Tabulation-------------------------------------------------------------------------

class Solution {
public:
    int longestPalindromeSubseq(string s) {                                               T.C O(n*n).  
        int n = s.size();                                                                 S.C O(n*n)
        vector<vector<int>> dp(n, vector<int>(n));

        for (int i = n - 1; i >= 0; i--) {
            dp[i][i] = 1;
            for (int j = i + 1; j < n; j++) {
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[0][n - 1];
    }
};

ðŸ‘‰-----space optimization-------------------------------------------------------------------------

class Solution {
public:
    int longestPalindromeSubseq(string s) {                                                      T.C O(n*n)
        int n=s.length();                                                                        S.C O(n)
        string t=s;
        reverse(s.begin(),s.end());
        vector<int>prev(n+1,0),cur(n+1,0);

        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(s[i-1]==t[j-1]){
                    cur[j]=prev[j-1]+1;
                }
                else{
                    cur[j]=max(prev[j],cur[j-1]);
                }
            }
            prev=cur;
        }
        return prev[n];
    }
};
